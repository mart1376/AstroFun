---
interface Props {
  titles: string[];
  interval?: number;
}

const { titles = ["First", "Second", "Third"], interval = 3000 } = Astro.props as Props;
---

<style>
  .animated-text-container {
    position: relative;
    display: inline-block;
    height: 1em; /* Adjust based on font size */
    overflow: hidden;
  }

  .animated-text {
    position: absolute;
    width: 100%;
    font-size: inherit;
    font-weight: bold;
    opacity: 0;
    transform: translateY(100%);
    transition: transform 0.6s ease-in-out, opacity 0.4s ease-in-out;
  }

  .animated-text.active {
    opacity: 1;
    transform: translateY(0);
  }

  .animated-text.exit {
    transform: translateY(-100%);
    opacity: 0;
  }
</style>

<span class="animated-text-container" data-interval={interval}>
  {titles.map((title, index) => (
    <span class="animated-text" data-index={index}>{title}</span>
  ))}
</span>

<script>
  const container = document.querySelector('.animated-text-container');
  const interval = parseInt(container.dataset.interval, 10); // ✅ Get interval from Astro
  const titles = container.querySelectorAll('.animated-text');
  let activeIndex = 0;

  function cycleText() {
    const current = titles[activeIndex];
    const nextIndex = (activeIndex + 1) % titles.length;
    const next = titles[nextIndex];

    current.classList.remove("active");
    current.classList.add("exit");
    next.classList.add("active");

    setTimeout(() => current.classList.remove("exit"), 600);

    activeIndex = nextIndex;
  }

  setInterval(cycleText, interval); // ✅ Now interval is defined!
  titles[0].classList.add("active"); // Set initial active word
</script>